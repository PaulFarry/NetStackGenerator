// generated by a tool
import React, { Component } from 'react';
import { Table, TableBody, TableCell, TableHead, TableRow, Rating, Typography } from "@mui/material";
import { Redirect, Link } from 'react-router-dom'
import { {{cs_name DetailType.Name}} } from './{{cs_name DetailType.Name}}';
import { {{ClientApiTypeName}}, {{ClientApiInterfaceName}} } from './{{cml_case Name}}ApiClient';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faPlus, faTrash, faEdit, faEye } from '@fortawesome/free-solid-svg-icons';
import { Loading } from '../../controls/loading';
import { ErrorControl } from '../../controls/error-control';
import DateTimeDisplay from '../../controls/DateTimeDisplay';
import Thumbnail from '../../controls/thumbnail';
import Title from "../../controls/Title";
{{#each RelatedDetails}}
import { {{ClientApiTypeName}}, {{ClientApiInterfaceName}} } from '../{{kb_case Name}}/{{cml_case Name}}ApiClient';
import { {{cs_name SelectAllType.Name}} } from '../{{kb_case Name}}/{{cs_name SelectAllType.Name}}';
import { {{cs_name SelectAllType.Name}}List } from '../{{kb_case Name}}/list/{{cml_case SelectAllType.Name}}List';
{{/each}}

interface {{cs_name Name}}DetailProps {
    match?: any;
    api?: {{ClientApiInterfaceName}} | null;
{{#each RelatedDetails}}
    {{cml_case Name}}Api?: {{ClientApiInterfaceName}} | null;
{{/each}}
}

interface {{cs_name Name}}DetailState {
    data: {{cs_name DetailType.Name}} | null;
	{{#each RelatedDetails}}
    {{cml_case Name}}Data: {{cs_name SelectAllType.Name}}[] | null;
	{{/each}}
    loading: boolean;
    error: boolean;
	{{#each RelatedDetails}}
    loading{{cs_name Name}}: boolean;
    {{cml_case Name}}Error: boolean;
	{{/each}}
    message?: string;
}

export class {{cs_name Name}}Detail extends Component<{{cs_name Name}}DetailProps, {{cs_name Name}}DetailState> {

    private api : {{ClientApiInterfaceName}} = this.props.api ? this.props.api : new {{ClientApiTypeName}}();
	{{#each RelatedDetails}}
    private {{cml_case Name}}Api : {{ClientApiInterfaceName}} = this.props.{{cml_case Name}}Api ? this.props.{{cml_case Name}}Api : new {{ClientApiTypeName}}();
	{{/each}}

    constructor(props: {{cs_name Name}}DetailProps) {
        super(props);
        this.state = { 
		    data: null, 
		    {{#each RelatedDetails}}
		    {{cml_case Name}}Data: null,
		    loading{{cs_name Name}}: true,
		    {{cml_case Name}}Error: false,
		    {{/each}}
		    loading: true, 
		    error: false 
		};
    }

    componentDidMount() {
        const { id } = this.props.match.params;
        this.getItemDetails(id);
		{{#each RelatedDetails}}
        this.get{{cs_name Name}}Details(id);
		{{/each}}
    }

    static render{{cs_name Name}}Detail(data: {{cs_name DetailType.Name}}) {
        return (
            <>
            <Table>
                <TableBody>
                    {{#each DisplayFields}}
					<TableRow>
                        <TableCell>
                            <Typography variant="subtitle2">{{DisplayName}}</Typography>
                        </TableCell>
                        <TableCell>
						{{#if IsDateTime}}
						<DateTimeDisplay date={ data.{{cml_case Name}} } />
						{{else}}
						{{#if IsBoolean}}
						{ data.{{cml_case Name}} ? 'Yes' : 'No' }
						{{else}}
                            {{#if IsColor}}
						<div style={ { width: '18px', height: "18px", border: "black 1px solid", background: data.{{cml_case Name}} } as React.CSSProperties}></div>
						    {{else}}
                                {{#if IsRating}}
                        <Rating value={ data.{{cml_case Name}} } readOnly />
                                {{else}}
									{{#if IsLinkingFieldToAttachmentWithThumbnail}}
						<Thumbnail id={ data.{{cml_case LinkingField.Name}} } name={ data.{{cml_case Name}} } entityName="{{kb_case RelatedType.Name}}" />
									{{else}}
						{ data.{{cml_case Name}} }
									{{/if}}		
                                {{/if}}
                            {{/if}}
                        {{/if}}
						{{/if}}
                        </TableCell>
					</TableRow>
					{{/each}}
                </TableBody>
            </Table>
			{{#each UpdateOperations}}
			<Link className="btn btn-primary" aria-label={'Edit'} to={ {
                                    pathname: '/{{kb_case ../Name}}/{{kb_case FriendlyName}}/' + data.id,
                                    state: {
                                        data: data
                                    }
			} }><FontAwesomeIcon title="{{FriendlyName}}" className="mr-1" icon={faEdit} />{{FriendlyName}} {{../HumanizedName}}</Link>
			{{/each}}
            </>
        );
    }

    render() {

		var contents = null;
        if (this.state.error) {
            contents = <ErrorControl message={this.state.message ? this.state.message : "unable to load {{hmn Name}}"}></ErrorControl>;
        } else {
			if (this.state.data) {
				contents = {{cs_name Name}}Detail.render{{cs_name Name}}Detail(this.state.data);
			}
			else {
				contents = <Loading />;
			}
        }

		{{#each RelatedDetails}}
		var {{cml_case Name}}Contents = null;
		if (this.state.{{cml_case Name}}Error) {
            {{cml_case Name}}Contents = <ErrorControl message={"unable to load {{hmn Name}}."}></ErrorControl>;
        } else {
			if (this.state.loading{{cs_name Name}}){
				{{cml_case Name}}Contents = <Loading />;			
			}
			else {
                {{cml_case Name}}Contents = <{{cs_name SelectAllType.Name}}List data={ this.state.{{cml_case Name}}Data } dataProvided={true} linkedType='{{../Name}}' linkedId={this.state.data ? this.state.data.id : null} />;		
			}
        }
		{{/each}}

		if (this.state.data) {
			return (
			<div>
				{{#if DisplayField}}
				<Title>{ this.state.data.{{cml_case DisplayField.Name}} }</Title>
				{{else}}
				<Title>{{HumanizedName}} { this.state.data.{{cml_case IdentityField.Name}} }</Title>
				{{/if}}
				<p>{{HumanizedName}} Details</p>
				{contents}
				{{#each RelatedDetails}}
				<div className="related-detail">
				{ {{cml_case Name}}Contents }
				</div>
				{{/each}}
			</div>
			);
		}
		else {
			return (
			<div>
				<Title>{{HumanizedName}}</Title>
				{contents}
				{{#each RelatedDetails}}
				<div className="related-detail">
				{ {{cml_case Name}}Contents }
				</div>
				{{/each}}
			</div>			
			);
		}
    }

    async getItemDetails(id: {{get_ts_type IdentityField.ClrType}}) {
        await this.api.selectForDisplayById(id).then(data => {
            if (data.parsedBody && data.parsedBody.length > 0) {				
				this.setState({ data: data.parsedBody[0], loading: false });								
			} else {
				this.setState({ data: null, loading: false, error: true, message: "Item Not Found" });				
			}            
        }).catch(err => {
            this.setState({ loading: false, error: true, message: err.message });
        });
    }

	{{#each LinkedDetails}}
	async get{{cs_name Name}}Details(id: {{get_ts_type CurrentTypeIdField.ClrType}}) {
		await this.{{cml_case Name}}Api.selectVia{{cs_name ../Name}}Id(id).then(data => {
			var responseBody = data.parsedBody;
			if (responseBody) {
				this.setState({ loading{{cs_name Name}}: false, {{cml_case Name}}Data: responseBody  });
			} else {
                this.setState({ loading{{cs_name Name}}: false });
            }
		}).catch(err => {
			this.setState({ loading{{cs_name Name}}: false, {{cml_case Name}}Error: true });
		});	
	}
	{{/each}}

	{{#each DirectlyRelatedDetails}}
	async get{{cs_name Name}}Details(id: {{LinkingFieldTsType}}) {
		await this.{{cml_case Name}}Api.selectForDisplayBy{{cs_name LinkingFieldBareName}}(id).then(data => {
			var responseBody = data.parsedBody;
			if (responseBody) {
				this.setState({ loading{{cs_name Name}}: false, {{cml_case Name}}Data: responseBody  });
			} else {
                this.setState({ loading{{cs_name Name}}: false });     
            }
		}).catch(err => {
			this.setState({ loading{{cs_name Name}}: false, {{cml_case Name}}Error: true });
		});	
	}
	{{/each}}
}

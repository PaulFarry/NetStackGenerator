// generated by a tool
import React, { FunctionComponent, useRef, useEffect, useState } from 'react';

// material imports
import { TableHead, TableContainer, TableBody, Table, Fab, Grid } from "@mui/material";
import AddIcon from '@mui/icons-material/Add';

// other libraries
import { Link } from 'react-router-dom';

import { {{cs_name Name}} } from '../{{cs_name Name}}';
import { {{cs_name Name}}Row } from './{{cml_case Name}}Row';
import { {{cs_name Name}}Header } from './{{cml_case Name}}Header';
import { {{UnderlyingType.ClientApiInterfaceName}}, {{UnderlyingType.ClientApiTypeName}} } from '../{{cml_case UnderlyingType.Name}}ApiClient';
import { Loading } from '../../../controls/loading';
import {{cs_name Name}}ListRendering from './{{cml_case Name}}ListRendering';
import Title from "../../../controls/Title";

export interface {{cs_name Name}}ListState {
    data: {{cs_name Name}}[];
    loading: boolean;
    error: boolean;
    message?: string;
}

interface {{cs_name Name}}ListProps {
    data?: {{cs_name Name}}[] | null;
    dataProvided?: boolean | null;
    hideHeading?: boolean | null;
    hideAddButton? : boolean | null;
    linkedType? : string | null;
    linkedId? : number | string | null;
    api? : {{UnderlyingType.ClientApiInterfaceName}} | null;
}

export const {{cs_name Name}}List : FunctionComponent<{{cs_name Name}}ListProps> = (props: {{cs_name Name}}ListProps) => {

    const api : {{UnderlyingType.ClientApiInterfaceName}} = props.api ? props.api : new {{UnderlyingType.ClientApiTypeName}}();
    const rendering: {{cs_name Name}}ListRendering = new {{cs_name Name}}ListRendering();
    const [state , setState] = useState<{{cs_name Name}}ListState>({data: props.dataProvided ? props.data ? props.data : [] : [], loading : !props.dataProvided, error: false});
    const mounted = useRef();

    useEffect(() => {
        {{#if HasOperations}}
        if (!mounted.current) {
            if (state.loading) {
                {{cml_case PrimaryOperation.BareName}}();
            }
        } else {
            if (props.data && (props.data != state.data)) {
                setState({ data: props.data, loading: false, error: false });
            }
        }    
        {{else}}
        if (props.data && (props.data != state.data)) {
            setState({ data: props.data, loading: false, error: false });
        }
        {{/if}}
    });

    return render();

    function render{{cs_name Name}}Table(data: {{cs_name Name}}[]) {
		return (
                <TableContainer>
                    <Table>
                        <TableHead>
                            <{{cs_name Name}}Header />
                        </TableHead>
                        <TableBody>
                            {data.map(s =>
                                <{{cs_name Name}}Row data={s} key={ s.{{cml_case IdentityField.Name}} } />
                            )}
                        </TableBody>
                    </Table>
                </TableContainer>    
        );
    }

	function render() {

		var contents = null;
        if (state.error) {
            contents = renderError();
        } else {
            if (state.loading) {
                contents = <Loading />;
            } else {
				contents = state.data.length > 0 ? renderData() : "";
			}
        }

        return (
            <React.Fragment>
                { renderHeading() }                
                { renderDescription() }
                {contents}
                {{has UnderlyingType.AddOperations}}
                {props.hideAddButton ? null :
                    (
                        <Grid container direction="column" alignItems="flex-end">
                            <Fab size="medium" color="primary" aria-label="add {{UnderlyingType.HumanizedName}}" component={Link} to={ {pathname: '/{{kb_case UnderlyingType.Name}}/add' , state: { linkedType: props.linkedType, linkedId: props.linkedId}} }>
                                <AddIcon />
                            </Fab>
                        </Grid>
                    )
                }
                {{/has}}
            </React.Fragment>
        );
    }

	function renderHeading() {
        if (props.hideHeading) {
            return null;
        }
        var customHeading = rendering.renderCustomHeading(state);
        return customHeading ? customHeading : (<Title>{{UnderlyingType.HumanizedNamePlural}}</Title>);
    }

    function renderError() {
        var customError = rendering.renderCustomError(state);
        return customError ? customError : <p><em>Error</em> : {state.message}</p>;
    }

    function renderData() {
        var customData = rendering.renderCustomData(state);
        return customData ? customData : render{{cs_name Name}}Table(state.data);
    }

    function renderDescription() {
        var customDescription = rendering.renderCustomDescription(state);
        return customDescription
            ? customDescription
            : (state.data.length > 0 ? null : <p>There are no {{UnderlyingType.HumanizedNamePlural}}</p>);
    }

	{{#each Operations}}
    async function {{cml_case BareName}}() {
        await api.{{cml_case BareName}}().then(data => {
            var responseBody = data.parsedBody;
            if (responseBody) {
                setState({ data: responseBody, loading: false } as Pick<{{cs_name ../Name}}ListState, keyof {{cs_name ../Name}}ListState>);
            } else {
                setState({...state, loading: false } as Pick<{{cs_name ../Name}}ListState, keyof {{cs_name ../Name}}ListState>);
            }
        }).catch(err => {
            setState({ data: [], loading: false, error: true, message: err.message });
        });
    }
	
	{{/each}}
}

// generated by a tool
import React, { Component } from 'react';
import {IconButton, Rating, TableCell, TableRow} from "@mui/material";
import { Redirect, Link } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlus } from '@fortawesome/free-solid-svg-icons';
import VisibilityIcon from '@mui/icons-material/Visibility';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import { {{cs_name Name}} } from '../{{cs_name Name}}';
import Thumbnail from '../../../controls/thumbnail';
import DateTimeDisplay from '../../../controls/DateTimeDisplay';
{{#if UnderlyingType.IsReferenceData}}
import { ILoginState, UserConsumer, isInRole } from '../../../api-authorization/UserContext';
{{/if}}

interface {{cs_name Name}}RowProps {
    data: {{cs_name Name}};
}

export class {{cs_name Name}}Row extends Component<{{cs_name Name}}RowProps, any> {

        render() {
            let s = this.props.data;
            return <TableRow key={s.id}>
                            {{#each ListFields}}
                                {{#if IsLinkingFieldWithDetails}}
                            <TableCell><Link to={ { pathname:'/{{kb_case LinkingField.ReferencesType.Name}}/detail/' + s.{{cml_case LinkingField.Name}} } }> { s.{{cml_case Name}} }</Link></TableCell>
                                {{else}}
							        {{#if IsDateTime}}
							<TableCell><DateTimeDisplay date={s.{{cml_case Name}} } /></TableCell>
							        {{else}}
							            {{#if IsBoolean}}
							<TableCell>{ s.{{cml_case Name}} ? 'Yes' : 'No' }</TableCell>
							            {{else}}
                                            {{#if IsColor}}
							<TableCell><div style={ { width: '18px', height: "18px", border: "black 1px solid", background: s.{{cml_case Name}} } as React.CSSProperties}></div></TableCell>
                                            {{else}}
                                                {{#if IsRating}}
                            <TableCell><Rating value={ s.{{cml_case Name}} } readOnly /></TableCell>
                                                {{else}}
                                                    {{#if IsLinkingFieldToAttachmentWithThumbnail}}
                            <TableCell><Thumbnail id={ s.{{cml_case LinkingField.Name}} } name={ s.{{cml_case Name}} }  entityName="{{kb_case RelatedType.Name}}" /></TableCell>
                                                    {{else}}
                            <TableCell>{ s.{{cml_case Name}} }</TableCell>
                                                    {{/if}}
                                                {{/if}}
                                            {{/if}}
							            {{/if}}
							        {{/if}}
                                {{/if}}
							{{/each}}
                            {{#if UnderlyingType.IsAttachmentWithThumbnail}}
                            <TableCell> <Thumbnail id={s.id} name={ s.{{cml_case DisplayField.Name}} } entityName="{{kb_case UnderlyingType.Name}}" /> </TableCell>
                            {{/if}}
                            <TableCell align="right" sx={ {whiteSpace:"nowrap"} }>
							{{#if UnderlyingType.HasDetails}}
                                <IconButton component={Link} aria-label={'View'} to={ {
                                    pathname: '/{{kb_case UnderlyingType.Name}}/detail/' + s.id,
                                    state: {
                                        data: s
                                    }
                                } }><VisibilityIcon /></IconButton>
							{{/if}}
							{{#if UnderlyingType.IsReferenceData}}
							{/* reference data */}
							<UserConsumer>
							{props => {
								return isInRole(props, "admin") ? (<>
                                <IconButton component={Link} aria-label={'Edit'} to={ {
                                    pathname: '/{{kb_case UnderlyingType.Name}}/edit/' + s.id,
                                    state: {
                                        data: s
                                    }
                                } }><EditIcon /></IconButton>
							</>) : null;} }
							</UserConsumer>
							{{#if UnderlyingType.CanDelete}}
							<UserConsumer>
							{props => {
								return isInRole(props, "admin") ? (<>
                                <IconButton component={Link} aria-label={'Delete'} to={ {
                                    pathname: '/{{kb_case UnderlyingType.Name}}/delete/' + s.id,
                                    state: {
                                        data: s
                                    }
                                } }><DeleteIcon /></IconButton>
							</>) : null; } }
							</UserConsumer>
							{{/if}}
							{{else}}
							{/* non-reference data */}
                                <IconButton component={Link} aria-label={'Edit'} to={ {
                                    pathname: '/{{kb_case UnderlyingType.Name}}/edit/' + s.id,
                                    state: {
                                        data: s
                                    }
                                } }><EditIcon /></IconButton>
							{{#if UnderlyingType.CanDelete}}
                                <IconButton component={Link} aria-label={'Delete'} to={ {
                                    pathname: '/{{kb_case UnderlyingType.Name}}/delete/' + s.id,
                                    state: {
                                        data: s
                                    }
                                } }><DeleteIcon /></IconButton>
							{{/if}}
							{{/if}}
                            </TableCell>
                        </TableRow>;
        }
}
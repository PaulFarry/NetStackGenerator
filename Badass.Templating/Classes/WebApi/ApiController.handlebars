// generated by a tool
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using {{cs_name Namespace}}.Data.Domain;
using {{cs_name Namespace}}.Data.Repository;
using {{cs_name Namespace}}.Models;
using {{cs_name Namespace}}.Services;
{{#if HasCustomResultType}}
using {{cs_name Namespace}}.Data.Model; 
{{/if}}

namespace {{cs_name Namespace}}.Controllers
{
	[Route("api/{{kb_case Name}}")]
    public partial class {{cs_name Name}}ApiController : {{{ControllerBaseClassName}}}
    {
        private readonly I{{cs_name Name}}Repository _repository;
        private readonly IUserService _userService;

		{{#if GenerateConstructor}}
        public {{cs_name Name}}ApiController(I{{cs_name Name}}Repository repository, IUserService userService)
        {
            _repository = repository;
            _userService = userService;
        }

		{{/if}}
        {{#each Operations}}
		{{#unless AllowAnon}}[Authorize]{{/unless}}
		{{#if UsesModel}}
		[Http{{HttpMethod}}("[action]")]
        [ProducesResponseType(typeof({{{Returns}}}), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
		public async {{#if NoResult}}Task{{else}}Task<ActionResult>{{/if}} {{cs_name BareName}}([FromBody]{{cs_name Name}}Model model)
		{
			var requestUserId = _userService.GetUserId(HttpContext.User);
			{{#if ApiHooks}}
			var beforeResult = await Before{{cs_name BareName}}(requestUserId, model);
            if (beforeResult != null)
			{
                return beforeResult;    
            }    
			{{/if}}
			{{#unless NoResult}}var {{cml_case BareName}}Result = {{/unless}}await _repository.{{cs_name BareName}}Async({{#each Parameters}}{{#if IsCurrentUser}}{{#if IsNullable}}requestUserId{{else}}requestUserId.Value{{/if}}{{else}}model.{{cs_name Name}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}});
			{{#if ApiHooks}}				
			{{#unless NoResult}}return await {{/unless}}After{{cs_name BareName}}(requestUserId, {{#unless NoResult}}{{cml_case BareName}}Result, {{/unless}} model);
            {{else}}
            {{#unless NoResult}}return Ok({{cml_case BareName}}Result);{{/unless}}
            {{/if}}
		}
		{{else}}
		[Http{{HttpMethod}}("[action]")]
        [ProducesResponseType(typeof({{{Returns}}}), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
		public async {{#if NoResult}}Task{{else}}Task<ActionResult>{{/if}} {{cs_name BareName}}({{#each UserProvidedParameters}}{{#unless ../ProvideDataByUri}}[FromBody]{{/unless}}{{{ResolvedClrType}}} {{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}})
		{
			var requestUserId = _userService.GetUserId(HttpContext.User);
			{{#if ApiHooks}}
			var beforeResult = await Before{{cs_name BareName}}(requestUserId{{#each UserProvidedParameters}}, {{cml_case Name}}{{/each}});
            if (beforeResult != null)
            {
                return beforeResult;    
            }    
			
			{{/if}}
			{{#unless NoResult}}var {{cml_case BareName}}Result = {{/unless}}await _repository.{{cs_name BareName}}Async({{#each Parameters}}{{#if IsCurrentUser}}{{#if IsNullable}}requestUserId{{else}}requestUserId.Value{{/if}}{{else}}{{cml_case Name}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}});
			{{#if ApiHooks}}				
			{{#unless NoResult}}return await {{/unless}}After{{cs_name BareName}}(requestUserId, {{#unless NoResult}}{{cml_case BareName}}Result, {{/unless}}{{#each UserProvidedParameters}}{{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}});
            {{else}}
            {{#unless NoResult}}return Ok({{cml_case BareName}}Result);{{/unless}}
            {{/if}}
		}
		{{/if}}

		{{/each}}
    }
}